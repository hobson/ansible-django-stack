---

- debug: msg="Using the application path {{ application_path }} to run manage_py commands"
- debug: msg="Using the application path {{ django_secret_key }} to run manage_py commands"

- name: "Install dev packages required by the Django app requirements.txt (gnureadline cffi)"
  apt: name={{ item }} update_cache={{ update_apt_cache }} force=yes state=installed
  with_items:
    - libreadline-dev
    - libterm-readline-gnu-perl
    - libreadline6
    - libreadline6-dev
    - libreadline-dev
    - libncurses5
    - libncurses5-dev
    - libmemcached-dev
    - zlib1g-dev
    - libssl-dev
    - libffi-dev
  tags: packages

- name: "Install packages required by the Django app inside virtualenv"
  pip: virtualenv={{ virtualenv_path }} requirements={{ requirements_file }}

- name: "Ensure { application_path }}/fixtures/ exists"
  file: path="{{ application_path }}/fixtures" state=directory

- name: "Ensure {{ project_path }}/media/ exists"
  file: path="{{ project_path }}/media" state=directory

- name: "Create an initial_data fixture with a predefined Django superuser, {{ django_admin_user }} (for admin interface)"
  template: src=initial_data.json.j2
            dest="{{ application_path }}/fixtures/initial_data.json"
            owner={{ gunicorn_user }}
            group={{ gunicorn_group }}
            mode=0755
            backup=no
  when: django_admin
  tags: django.admin

- name: "Create a local_settings.py module to override the generic settings.py"
  template: src=local_settings.py
            dest={{ project_path }}/{{ application_name }}/local_settings.py
            owner={{ gunicorn_user }}
            group={{ gunicorn_group }}
            mode=0755
            backup=no

- name: "Run the Django syncdb command in {{ project_path }} with --settings={{ django_settings_file }}"
  django_manage:
    command: syncdb
    app_path: "{{ project_path }}"
    virtualenv: "{{ virtualenv_path }}"
    settings: "{{ django_settings_file }}"
  environment: django_environment
  when: run_django_syncdb
  tags: django.syncdb


- name: Run Django migrations
  django_manage:
    command: migrate
    app_path: "{{ project_path }}"
    virtualenv: "{{ virtualenv_path }}"
    settings: "{{ django_settings_file }}"
  environment: django_environment
  when: run_django_migrate
  tags: django.migrate

- name: Run Django collectstatic
  django_manage:
    command: collectstatic
    app_path: "{{ project_path }}"
    virtualenv: "{{ virtualenv_path }}"
    settings: "{{ django_settings_file }}"
  environment: django_environment
  when: run_django_collectstatic
  tags: django.collectstatic




