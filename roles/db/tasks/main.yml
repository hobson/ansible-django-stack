---

- name: Install PostgreSQL
  apt: name={{ item }} update_cache={{ update_apt_cache }} state=installed
  with_items:
    - postgresql
    - postgresql-contrib
    - libpq-dev
    - python-psycopg2
  tags: packages

- name: Ensure the PostgreSQL service is running
  service: name=postgresql state=started enabled=yes

- name: Ensure database is created
  sudo_user: postgres
  postgresql_db: name={{ db_name }}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 template='template0'
                 state=present

- name: Ensure user has access to the database
  sudo_user: postgres
  postgresql_user: db={{ db_name }}
                   name={{ db_user }}
                   password={{ db_password }}
                   priv=ALL
                   state=present

- name: Ensure user does not have unnecessary privileges
  sudo_user: postgres
  postgresql_user: name={{ db_user }}
                   role_attr_flags=NOSUPERUSER,NOCREATEDB
                   state=present

- name: Create shell script for manually restoring db
  template: src=load_data.j2
            dest=/root/load_data.sh

- name: db_restore | Receive latest DB backup
  shell: curl -O {{ db_dump_url }}/{{ db_dump_filename }}.tgz
  args:
      chdir: /root/
      creates: "{{ db_dump_filename }}.tgz"
  when: "{{ load_db_dump }}"

- name: db_restore | Check if file exists
  stat: path=/root/{{ db_dump_filename }}.tgz
  register: sql_latest

- name: db_restore | Restore latest DB backup if backup file found
  sudo_user: "{{ db_user }}"
  shell: PGPASSWORD={{ db_password }} tar -xzOf {{ db_dump_filename }}.tgz {{ db_dump_filename }}.sql | psql -U{{ db_user }} --set ON_ERROR_STOP=on {{ db_name }}
  when: sql_latest.stat.exists
  ignore_errors: True

